using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using TMPro;

namespace CatchMeowIfYouCan.UI
{
    /// <summary>
    /// GuideManager - Qu·∫£n l√Ω trang h∆∞·ªõng d·∫´n ch∆°i game
    /// Hi·ªÉn th·ªã c√°c h∆∞·ªõng d·∫´n c∆° b·∫£n v·ªÅ di chuy·ªÉn v√† gameplay
    /// </summary>
    public class GuideManager : MonoBehaviour
    {
        [Header("UI References")]
        [SerializeField] private Canvas guideCanvas;
        [SerializeField] private Image backgroundImage;
        [SerializeField] private TextMeshProUGUI titleText;
        [SerializeField] private TextMeshProUGUI instructionText;
        [SerializeField] private Button backButton;
        [SerializeField] private Button playButton;
        
        [Header("Background Settings")]
        [SerializeField] private Color backgroundColor = new Color(0.2f, 0.6f, 0.8f, 1f); // M√†u xanh
        
        [Header("Text Settings")]
        [SerializeField] private Color textColor = Color.white;
        [SerializeField] private Color titleColor = Color.yellow;
        
        [Header("Scene Navigation")]
        [SerializeField] private string mainMenuSceneName = "Menu";
        [SerializeField] private string gameSceneName = "SampleScene";
        
        private void Awake()
        {
            SetupGuideUI();
        }
        
        private void Start()
        {
            SetupButtonEvents();
            SetupBackgroundAndColors();
            SetupGuideText();
        }
        
        /// <summary>
        /// T·ª± ƒë·ªông t·∫°o UI n·∫øu ch∆∞a c√≥ references
        /// </summary>
        private void SetupGuideUI()
        {
            // T√¨m ho·∫∑c t·∫°o Canvas
            if (guideCanvas == null)
            {
                GameObject canvasObj = GameObject.Find("GuideCanvas");
                if (canvasObj != null)
                {
                    guideCanvas = canvasObj.GetComponent<Canvas>();
                }
            }
            
            // T·ª± ƒë·ªông t√¨m c√°c UI components
            if (guideCanvas != null)
            {
                backgroundImage = guideCanvas.GetComponentInChildren<Image>();
                titleText = GameObject.Find("TitleText")?.GetComponent<TextMeshProUGUI>();
                instructionText = GameObject.Find("InstructionText")?.GetComponent<TextMeshProUGUI>();
                backButton = GameObject.Find("BackButton")?.GetComponent<Button>();
                playButton = GameObject.Find("PlayButton")?.GetComponent<Button>();
            }
        }
        
        /// <summary>
        /// Setup m√†u n·ªÅn v√† m√†u ch·ªØ
        /// </summary>
        private void SetupBackgroundAndColors()
        {
            // Set background color
            if (backgroundImage != null)
            {
                backgroundImage.color = backgroundColor;
            }
            else
            {
                // Set camera background n·∫øu kh√¥ng c√≥ UI background
                Camera mainCamera = Camera.main;
                if (mainCamera != null)
                {
                    mainCamera.backgroundColor = backgroundColor;
                }
            }
            
            // Set text colors
            if (titleText != null)
            {
                titleText.color = titleColor;
            }
            
            if (instructionText != null)
            {
                instructionText.color = textColor;
            }
        }
        
        /// <summary>
        /// Setup n·ªôi dung h∆∞·ªõng d·∫´n
        /// </summary>
        private void SetupGuideText()
        {
            // Title
            if (titleText != null)
            {
                titleText.text = "üê± H∆Ø·ªöNG D·∫™N CH∆†I GAME üê±";
                titleText.fontSize = 48f;
                titleText.fontStyle = FontStyles.Bold;
                titleText.alignment = TextAlignmentOptions.Center;
            }
            
            // Instructions
            if (instructionText != null)
            {
                instructionText.text = GetInstructionText();
                instructionText.fontSize = 24f;
                instructionText.alignment = TextAlignmentOptions.Left;
                instructionText.fontStyle = FontStyles.Normal;
            }
        }
        
        /// <summary>
        /// N·ªôi dung h∆∞·ªõng d·∫´n chi ti·∫øt
        /// </summary>
        private string GetInstructionText()
        {
            return @"üéÆ C√ÅCH CH∆†I:

üèÉ‚Äç‚ôÄÔ∏è DI CHUY·ªÇN:
‚Ä¢ Nh·∫•n D ho·∫∑c m≈©i t√™n PH·∫¢I ƒë·ªÉ di chuy·ªÉn sang ph·∫£i
‚Ä¢ Nh·∫•n A ho·∫∑c m≈©i t√™n TR√ÅI ƒë·ªÉ di chuy·ªÉn sang tr√°i  
‚Ä¢ Nh·∫•n SPACE ho·∫∑c W ƒë·ªÉ NH·∫¢Y

üéØ MUC TI√äU:
‚Ä¢ S·ªëng s√≥t c√†ng l√¢u c√†ng t·ªët!
‚Ä¢ Tr√°nh nh·ªØng con Catcher (k·∫ª b·∫Øt m√®o)
‚Ä¢ Thu th·∫≠p ƒëi·ªÉm s·ªë v√† power-ups

‚ö†Ô∏è NGUY HI·ªÇM:
‚Ä¢ Catcher s·∫Ω xu·∫•t hi·ªán khi b·∫°n g·∫ßn r√¨a m√†n h√¨nh
‚Ä¢ Camera s·∫Ω rung khi Catcher xu·∫•t hi·ªán - C·∫¢NH B√ÅO!
‚Ä¢ N·∫øu b·ªã ch·∫°m, b·∫°n s·∫Ω b·ªã ƒë·∫©y ra xa - h√£y nhanh ch√≥ng ch·∫°y tr·ªën!

üí° M·∫∏O:
‚Ä¢ Gi·ªØ ph√≠m D li√™n t·ª•c ƒë·ªÉ ch·ªëng l·∫°i l·ª±c tr√¥i ng∆∞·ª£c
‚Ä¢ Nh·∫£y ƒë·ªÉ tr√°nh Catcher hi·ªáu qu·∫£ h∆°n
‚Ä¢ Quan s√°t m√†n h√¨nh rung ƒë·ªÉ bi·∫øt Catcher s·∫Øp t·ªõi!

üèÜ CH√öC B·∫†N CH∆†I VUI V·∫∫!";
        }
        
        /// <summary>
        /// Setup button events
        /// </summary>
        private void SetupButtonEvents()
        {
            if (backButton != null)
            {
                backButton.onClick.RemoveAllListeners();
                backButton.onClick.AddListener(GoBackToMainMenu);
            }
            
            if (playButton != null)
            {
                playButton.onClick.RemoveAllListeners();
                playButton.onClick.AddListener(StartGame);
            }
        }
        
        /// <summary>
        /// Quay v·ªÅ main menu
        /// </summary>
        public void GoBackToMainMenu()
        {
            Debug.Log("[GuideManager] Returning to Main Menu...");
            SceneManager.LoadScene(mainMenuSceneName);
        }
        
        /// <summary>
        /// B·∫Øt ƒë·∫ßu ch∆°i game
        /// </summary>
        public void StartGame()
        {
            Debug.Log("[GuideManager] Starting game...");
            SceneManager.LoadScene(gameSceneName);
        }
        
        /// <summary>
        /// B·∫≠t/t·∫Øt guide panel
        /// </summary>
        public void ToggleGuide()
        {
            if (guideCanvas != null)
            {
                guideCanvas.gameObject.SetActive(!guideCanvas.gameObject.activeInHierarchy);
            }
        }
        
        /// <summary>
        /// Hi·ªÉn th·ªã guide
        /// </summary>
        public void ShowGuide()
        {
            if (guideCanvas != null)
            {
                guideCanvas.gameObject.SetActive(true);
            }
        }
        
        /// <summary>
        /// ·∫®n guide
        /// </summary>
        public void HideGuide()
        {
            if (guideCanvas != null)
            {
                guideCanvas.gameObject.SetActive(false);
            }
        }
        
        /// <summary>
        /// Update m√†u n·ªÅn runtime
        /// </summary>
        [ContextMenu("Apply Background Color")]
        public void ApplyBackgroundColor()
        {
            SetupBackgroundAndColors();
        }
        
        /// <summary>
        /// Test button functionality
        /// </summary>
        [ContextMenu("Test Button Events")]
        public void TestButtonEvents()
        {
            Debug.Log("[GuideManager] Testing button events...");
            Debug.Log($"Back Button: {(backButton != null ? "Found" : "Missing")}");
            Debug.Log($"Play Button: {(playButton != null ? "Found" : "Missing")}");
        }
        
        private void Update()
        {
            // ESC ƒë·ªÉ quay v·ªÅ main menu
            if (Input.GetKeyDown(KeyCode.Escape))
            {
                GoBackToMainMenu();
            }
            
            // Enter ƒë·ªÉ start game
            if (Input.GetKeyDown(KeyCode.Return) || Input.GetKeyDown(KeyCode.KeypadEnter))
            {
                StartGame();
            }
        }
        
        private void OnValidate()
        {
            // T·ª± ƒë·ªông apply m√†u khi thay ƒë·ªïi trong Inspector
            if (Application.isPlaying)
            {
                SetupBackgroundAndColors();
            }
        }
    }
}
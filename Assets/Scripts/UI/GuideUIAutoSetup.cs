using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using UnityEngine.EventSystems;
using TMPro;

namespace CatchMeowIfYouCan.UI
{
    /// <summary>
    /// Auto setup UI cho GuideScene - t·ª± ƒë·ªông t·∫°o Canvas v√† UI elements
    /// Ch·∫°y trong Editor ƒë·ªÉ setup UI nhanh ch√≥ng
    /// </summary>
    [System.Serializable]
    public class GuideUIAutoSetup : MonoBehaviour
    {
        [Header("Auto Setup Settings")]
        [SerializeField] private bool autoSetupOnStart = true;
        [SerializeField] private Color backgroundColor = new Color(0.2f, 0.6f, 0.8f, 1f);
        [SerializeField] private Color textColor = Color.white;
        [SerializeField] private Color titleColor = Color.yellow;
        
        [Header("Scene Navigation")]
        [SerializeField] private string mainMenuSceneName = "Menu";
        [SerializeField] private string gameSceneName = "SampleScene";
        
        private void Start()
        {
            if (autoSetupOnStart)
            {
                SetupGuideUI();
            }
        }
        
        /// <summary>
        /// T·ª± ƒë·ªông t·∫°o to√†n b·ªô UI cho Guide Scene
        /// </summary>
        [ContextMenu("Auto Setup Guide UI")]
        public void SetupGuideUI()
        {
            Debug.Log("[GuideUIAutoSetup] Setting up Guide UI...");
            
            // 1. Setup Camera background
            SetupCameraBackground();
            
            // 2. Create Canvas
            Canvas canvas = CreateOrFindCanvas();
            
            // 3. Create Background Panel
            CreateBackgroundPanel(canvas);
            
            // 4. Create Title
            CreateTitleText(canvas);
            
            // 5. Create Instruction Text
            CreateInstructionText(canvas);
            
            // 6. Create Buttons
            CreateButtons(canvas);
            
            // 7. Add GuideManager
            AddGuideManager(canvas);
            
            // 8. Ensure EventSystem exists (critical for button functionality)
            EnsureEventSystemExists();
            
            Debug.Log("[GuideUIAutoSetup] ‚úÖ Guide UI setup completed!");
        }
        
        /// <summary>
        /// ƒê·∫£m b·∫£o EventSystem t·ªìn t·∫°i (c·∫ßn thi·∫øt ƒë·ªÉ buttons ho·∫°t ƒë·ªông)
        /// </summary>
        private void EnsureEventSystemExists()
        {
            EventSystem eventSystem = FindFirstObjectByType<EventSystem>();
            if (eventSystem == null)
            {
                Debug.LogWarning("[GuideUIAutoSetup] No EventSystem found - creating one...");
                CreateEventSystem();
            }
            else
            {
                Debug.Log("[GuideUIAutoSetup] ‚úÖ EventSystem already exists");
            }
        }
        
        private void SetupCameraBackground()
        {
            Camera mainCamera = Camera.main;
            if (mainCamera != null)
            {
                mainCamera.backgroundColor = backgroundColor;
                Debug.Log("[GuideUIAutoSetup] Camera background color set");
            }
        }
        
        private Canvas CreateOrFindCanvas()
        {
            // T√¨m Canvas hi·ªán c√≥
            Canvas existingCanvas = FindFirstObjectByType<Canvas>();
            if (existingCanvas != null)
            {
                Debug.Log("[GuideUIAutoSetup] Using existing Canvas");
                return existingCanvas;
            }
            
            // T·∫°o Canvas m·ªõi
            GameObject canvasObj = new GameObject("GuideCanvas");
            Canvas canvas = canvasObj.AddComponent<Canvas>();
            canvas.renderMode = RenderMode.ScreenSpaceOverlay;
            canvas.sortingOrder = 100;
            
            // Add CanvasScaler
            CanvasScaler scaler = canvasObj.AddComponent<CanvasScaler>();
            scaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
            scaler.referenceResolution = new Vector2(1920, 1080);
            scaler.screenMatchMode = CanvasScaler.ScreenMatchMode.MatchWidthOrHeight;
            scaler.matchWidthOrHeight = 0.5f;
            
            // Add GraphicRaycaster
            canvasObj.AddComponent<GraphicRaycaster>();
            
            Debug.Log("[GuideUIAutoSetup] Canvas created");
            return canvas;
        }
        
        private void CreateBackgroundPanel(Canvas canvas)
        {
            GameObject bgPanel = new GameObject("BackgroundPanel");
            bgPanel.transform.SetParent(canvas.transform, false);
            
            Image bgImage = bgPanel.AddComponent<Image>();
            bgImage.color = backgroundColor;
            
            // Fullscreen
            RectTransform bgRect = bgPanel.GetComponent<RectTransform>();
            bgRect.anchorMin = Vector2.zero;
            bgRect.anchorMax = Vector2.one;
            bgRect.sizeDelta = Vector2.zero;
            bgRect.anchoredPosition = Vector2.zero;
            
            Debug.Log("[GuideUIAutoSetup] Background panel created");
        }
        
        private void CreateTitleText(Canvas canvas)
        {
            GameObject titleObj = new GameObject("TitleText");
            titleObj.transform.SetParent(canvas.transform, false);
            
            TextMeshProUGUI titleText = titleObj.AddComponent<TextMeshProUGUI>();
            titleText.text = "üê± H∆Ø·ªöNG D·∫™N CH∆†I GAME üê±";
            titleText.fontSize = 48f;
            titleText.color = titleColor;
            titleText.fontStyle = FontStyles.Bold;
            titleText.alignment = TextAlignmentOptions.Center;
            
            // Position at top
            RectTransform titleRect = titleObj.GetComponent<RectTransform>();
            titleRect.anchorMin = new Vector2(0f, 0.8f);
            titleRect.anchorMax = new Vector2(1f, 1f);
            titleRect.sizeDelta = Vector2.zero;
            titleRect.anchoredPosition = Vector2.zero;
            
            Debug.Log("[GuideUIAutoSetup] Title text created");
        }
        
        private void CreateInstructionText(Canvas canvas)
        {
            GameObject instructionObj = new GameObject("InstructionText");
            instructionObj.transform.SetParent(canvas.transform, false);
            
            TextMeshProUGUI instructionText = instructionObj.AddComponent<TextMeshProUGUI>();
            instructionText.text = GetInstructionText();
            instructionText.fontSize = 24f;
            instructionText.color = textColor;
            instructionText.alignment = TextAlignmentOptions.TopLeft;
            
            // Position in middle
            RectTransform instructionRect = instructionObj.GetComponent<RectTransform>();
            instructionRect.anchorMin = new Vector2(0.1f, 0.2f);
            instructionRect.anchorMax = new Vector2(0.9f, 0.8f);
            instructionRect.sizeDelta = Vector2.zero;
            instructionRect.anchoredPosition = Vector2.zero;
            
            Debug.Log("[GuideUIAutoSetup] Instruction text created");
        }
        
        private void CreateButtons(Canvas canvas)
        {
            // Back Button v·ªõi functionality
            Button backButton = CreateButton(canvas, "BackButton", "‚óÄ QUAY L·∫†I", new Vector2(0.1f, 0.05f), new Vector2(0.4f, 0.15f));
            
            // Play Button v·ªõi functionality  
            Button playButton = CreateButton(canvas, "PlayButton", "B·∫ÆT ƒê·∫¶U CH∆†I ‚ñ∂", new Vector2(0.6f, 0.05f), new Vector2(0.9f, 0.15f));
            
            // Add button events
            SetupButtonEvents(backButton, playButton);
            
            Debug.Log("[GuideUIAutoSetup] Buttons created with functionality");
        }
        
        private Button CreateButton(Canvas canvas, string name, string text, Vector2 anchorMin, Vector2 anchorMax)
        {
            GameObject buttonObj = new GameObject(name);
            buttonObj.transform.SetParent(canvas.transform, false);
            
            // Button component
            Button button = buttonObj.AddComponent<Button>();
            Image buttonImage = buttonObj.AddComponent<Image>();
            buttonImage.color = new Color(0.3f, 0.3f, 0.3f, 0.8f);
            
            // Button position
            RectTransform buttonRect = buttonObj.GetComponent<RectTransform>();
            buttonRect.anchorMin = anchorMin;
            buttonRect.anchorMax = anchorMax;
            buttonRect.sizeDelta = Vector2.zero;
            buttonRect.anchoredPosition = Vector2.zero;
            
            // Button text
            GameObject textObj = new GameObject("Text");
            textObj.transform.SetParent(buttonObj.transform, false);
            
            TextMeshProUGUI buttonText = textObj.AddComponent<TextMeshProUGUI>();
            buttonText.text = text;
            buttonText.fontSize = 20f;
            buttonText.color = Color.white;
            buttonText.fontStyle = FontStyles.Bold;
            buttonText.alignment = TextAlignmentOptions.Center;
            
            RectTransform textRect = textObj.GetComponent<RectTransform>();
            textRect.anchorMin = Vector2.zero;
            textRect.anchorMax = Vector2.one;
            textRect.sizeDelta = Vector2.zero;
            textRect.anchoredPosition = Vector2.zero;
            
            return button; // Return button component
        }
        
        /// <summary>
        /// Setup button event listeners ƒë·ªÉ quay v·ªÅ menu v√† start game
        /// </summary>
        private void SetupButtonEvents(Button backButton, Button playButton)
        {
            Debug.Log("[GuideUIAutoSetup] Setting up button events...");
            
            // Back button - quay v·ªÅ MainMenu scene
            if (backButton != null)
            {
                backButton.onClick.RemoveAllListeners();
                backButton.onClick.AddListener(() => {
                    Debug.Log($"[GuideUIAutoSetup] üî¥ BACK BUTTON CLICKED! Loading scene: {mainMenuSceneName}");
                    
                    // Ki·ªÉm tra scene c√≥ t·ªìn t·∫°i kh√¥ng
                    if (Application.CanStreamedLevelBeLoaded(mainMenuSceneName))
                    {
                        SceneManager.LoadScene(mainMenuSceneName);
                    }
                    else
                    {
                        Debug.LogError($"[GuideUIAutoSetup] ‚ùå Scene '{mainMenuSceneName}' not found! Check Build Settings.");
                        // Fallback: load scene by index
                        if (SceneManager.sceneCountInBuildSettings > 0)
                        {
                            Debug.Log("[GuideUIAutoSetup] Loading scene index 0 as fallback");
                            SceneManager.LoadScene(0);
                        }
                    }
                });
                Debug.Log("[GuideUIAutoSetup] ‚úÖ Back button events set up");
            }
            else
            {
                Debug.LogError("[GuideUIAutoSetup] ‚ùå Back button is NULL!");
            }
            
            // Play button - chuy·ªÉn sang SampleScene ƒë·ªÉ ch∆°i game
            if (playButton != null)
            {
                playButton.onClick.RemoveAllListeners();
                playButton.onClick.AddListener(() => {
                    Debug.Log($"[GuideUIAutoSetup] üü¢ PLAY BUTTON CLICKED! Loading scene: {gameSceneName}");
                    
                    // Ki·ªÉm tra scene c√≥ t·ªìn t·∫°i kh√¥ng
                    if (Application.CanStreamedLevelBeLoaded(gameSceneName))
                    {
                        SceneManager.LoadScene(gameSceneName);
                    }
                    else
                    {
                        Debug.LogError($"[GuideUIAutoSetup] ‚ùå Scene '{gameSceneName}' not found! Check Build Settings.");
                        // Fallback: load scene by index
                        if (SceneManager.sceneCountInBuildSettings > 1)
                        {
                            Debug.Log("[GuideUIAutoSetup] Loading scene index 1 as fallback");
                            SceneManager.LoadScene(1);
                        }
                    }
                });
                Debug.Log("[GuideUIAutoSetup] ‚úÖ Play button events set up");
            }
            else
            {
                Debug.LogError("[GuideUIAutoSetup] ‚ùå Play button is NULL!");
            }
            
            Debug.Log("[GuideUIAutoSetup] Button events configuration completed");
        }
        
        private void AddGuideManager(Canvas canvas)
        {
            GuideManager guideManager = canvas.GetComponent<GuideManager>();
            if (guideManager == null)
            {
                guideManager = canvas.gameObject.AddComponent<GuideManager>();
                Debug.Log("[GuideUIAutoSetup] GuideManager added to Canvas");
            }
        }
        
        private string GetInstructionText()
        {
            return @"üéÆ C√ÅCH CH∆†I:

üèÉ‚Äç‚ôÄÔ∏è DI CHUY·ªÇN:
‚Ä¢ Nh·∫•n D ho·∫∑c m≈©i t√™n PH·∫¢I ƒë·ªÉ di chuy·ªÉn sang ph·∫£i
‚Ä¢ Nh·∫•n A ho·∫∑c m≈©i t√™n TR√ÅI ƒë·ªÉ di chuy·ªÉn sang tr√°i  
‚Ä¢ Nh·∫•n SPACE ho·∫∑c W ƒë·ªÉ NH·∫¢Y

üéØ MUC TI√äU:
‚Ä¢ S·ªëng s√≥t c√†ng l√¢u c√†ng t·ªët!
‚Ä¢ Tr√°nh nh·ªØng con Catcher (k·∫ª b·∫Øt m√®o)
‚Ä¢ Thu th·∫≠p ƒëi·ªÉm s·ªë v√† power-ups

‚ö†Ô∏è NGUY HI·ªÇM:
‚Ä¢ Catcher s·∫Ω xu·∫•t hi·ªán khi b·∫°n g·∫ßn r√¨a m√†n h√¨nh
‚Ä¢ Camera s·∫Ω rung khi Catcher xu·∫•t hi·ªán - C·∫¢NH B√ÅO!
‚Ä¢ N·∫øu b·ªã ch·∫°m, b·∫°n s·∫Ω b·ªã ƒë·∫©y ra xa - h√£y nhanh ch√≥ng ch·∫°y tr·ªën!

üí° M·∫∏O:
‚Ä¢ Gi·ªØ ph√≠m D li√™n t·ª•c ƒë·ªÉ ch·ªëng l·∫°i l·ª±c tr√¥i ng∆∞·ª£c
‚Ä¢ Nh·∫£y ƒë·ªÉ tr√°nh Catcher hi·ªáu qu·∫£ h∆°n
‚Ä¢ Quan s√°t m√†n h√¨nh rung ƒë·ªÉ bi·∫øt Catcher s·∫Øp t·ªõi!

üèÜ CH√öC B·∫†N CH∆†I VUI V·∫∫!";
        }
        
        /// <summary>
        /// Debug method ƒë·ªÉ ki·ªÉm tra UI setup v√† button functionality
        /// </summary>
        [ContextMenu("Debug UI Setup")]
        public void DebugUISetup()
        {
            Debug.Log("=== GUIDE UI DEBUG ===");
            
            // Check Canvas
            Canvas canvas = FindFirstObjectByType<Canvas>();
            Debug.Log($"Canvas found: {(canvas != null ? canvas.name : "NULL")}");
            
            if (canvas != null)
            {
                // Check Canvas settings
                Debug.Log($"Canvas Render Mode: {canvas.renderMode}");
                Debug.Log($"Canvas Sorting Order: {canvas.sortingOrder}");
                
                // Check GraphicRaycaster
                GraphicRaycaster raycaster = canvas.GetComponent<GraphicRaycaster>();
                Debug.Log($"GraphicRaycaster: {(raycaster != null ? "Present" : "MISSING!")}");
                
                // Check EventSystem
                UnityEngine.EventSystems.EventSystem eventSystem = FindFirstObjectByType<UnityEngine.EventSystems.EventSystem>();
                Debug.Log($"EventSystem: {(eventSystem != null ? "Present" : "MISSING!")}");
                
                if (eventSystem == null)
                {
                    Debug.LogError("‚ùå NO EVENTSYSTEM! Creating one...");
                    CreateEventSystem();
                }
            }
            
            // Check Buttons
            Button[] buttons = FindObjectsByType<Button>(FindObjectsSortMode.None);
            Debug.Log($"Total buttons found: {buttons.Length}");
            
            foreach (Button btn in buttons)
            {
                Debug.Log($"Button: {btn.name}, Interactable: {btn.interactable}, Listeners: {btn.onClick.GetPersistentEventCount()}");
                
                // Check if button has Image component
                Image btnImage = btn.GetComponent<Image>();
                Debug.Log($"  - Image: {(btnImage != null ? btnImage.color.ToString() : "NULL")}");
                
                // Check if button is raycast target
                if (btnImage != null)
                {
                    Debug.Log($"  - Raycast Target: {btnImage.raycastTarget}");
                }
            }
            
            // Check scenes in build settings
            Debug.Log("=== SCENES IN BUILD SETTINGS ===");
            for (int i = 0; i < SceneManager.sceneCountInBuildSettings; i++)
            {
                string scenePath = SceneUtility.GetScenePathByBuildIndex(i);
                string sceneName = System.IO.Path.GetFileNameWithoutExtension(scenePath);
                Debug.Log($"Scene {i}: {sceneName} ({scenePath})");
            }
        }
        
        /// <summary>
        /// T·∫°o EventSystem n·∫øu ch∆∞a c√≥ (c·∫ßn thi·∫øt ƒë·ªÉ buttons ho·∫°t ƒë·ªông)
        /// </summary>
        private void CreateEventSystem()
        {
            GameObject eventSystemObj = new GameObject("EventSystem");
            eventSystemObj.AddComponent<UnityEngine.EventSystems.EventSystem>();
            eventSystemObj.AddComponent<UnityEngine.EventSystems.StandaloneInputModule>();
            Debug.Log("[GuideUIAutoSetup] ‚úÖ EventSystem created");
        }
        
        /// <summary>
        /// Test button click tr·ª±c ti·∫øp
        /// </summary>
        [ContextMenu("Test Button Clicks")]
        public void TestButtonClicks()
        {
            Button[] buttons = FindObjectsByType<Button>(FindObjectsSortMode.None);
            
            foreach (Button btn in buttons)
            {
                if (btn.name.Contains("Back"))
                {
                    Debug.Log("üî¥ Testing Back Button Click...");
                    btn.onClick.Invoke();
                }
                else if (btn.name.Contains("Play"))
                {
                    Debug.Log("üü¢ Testing Play Button Click...");
                    btn.onClick.Invoke();
                }
            }
        }
        }
    }
